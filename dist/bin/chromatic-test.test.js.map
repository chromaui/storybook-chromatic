{"version":3,"sources":["../../src/bin/chromatic-test.test.js"],"names":["jest","mock","CHROMATIC_CREATE_TUNNEL","CHROMATIC_APP_CODE","readFileSync","scripts","storybook","otherStorybook","notStorybook","process","env","it","expect","toMatchObject","appCode","scriptName","url","noStart","fromCI","autoAcceptChanges","exitZeroOnChanges","interactive","verbose","createTunnel","originalArgv","toThrow","commandName"],"mappings":"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","file":"chromatic-test.test.js","sourcesContent":["import { parseArgv } from './chromatic-test';\n\njest.mock('../assets/environment', () => ({\n  CHROMATIC_CREATE_TUNNEL: true,\n  CHROMATIC_APP_CODE: 'env-code',\n}));\n\njest.mock('jsonfile', () => ({\n  readFileSync: () => ({\n    scripts: {\n      storybook: 'start-storybook -p 1337',\n      otherStorybook: 'start-storybook -p 7070',\n      notStorybook: 'lint',\n    },\n  }),\n}));\n\nprocess.env.CHROMATIC_APP_CODE = 'test';\n\nit('sets reasonable defaults', () => {\n  expect(parseArgv(['node', 'chromatic-test', '--app-code', 'cli-code'])).toMatchObject({\n    appCode: 'cli-code',\n    scriptName: 'storybook',\n    url: 'http://localhost:1337/iframe.html',\n    noStart: false,\n    fromCI: false,\n    autoAcceptChanges: false,\n    exitZeroOnChanges: false,\n    interactive: true,\n    verbose: false,\n    createTunnel: true,\n    originalArgv: ['node', 'chromatic-test', '--app-code', 'cli-code'],\n  });\n});\n\nit('picks up app-code from environment', () => {\n  expect(parseArgv(['node', 'chromatic-test'])).toMatchObject({\n    appCode: 'env-code',\n  });\n});\n\nit('allows you to override defaults for boolean options', () => {\n  expect(\n    parseArgv([\n      'node',\n      'chromatic-test',\n      '--ci',\n      '--do-not-start',\n      '--auto-accept-changes',\n      '--exit-zero-on-changes',\n      '--debug',\n      '--no-interactive',\n    ])\n  ).toMatchObject({\n    noStart: true,\n    fromCI: true,\n    autoAcceptChanges: true,\n    exitZeroOnChanges: true,\n    verbose: true,\n    interactive: false,\n    createTunnel: true,\n  });\n});\n\nit('allows you to specify alternate script, still picks up port', () => {\n  expect(parseArgv(['node', 'chromatic-test', '--script-name', 'otherStorybook'])).toMatchObject({\n    scriptName: 'otherStorybook',\n    url: 'http://localhost:7070/iframe.html',\n  });\n});\n\nit('allows you to specify alternate script, that does not start storybook, if you set port', () => {\n  expect(\n    parseArgv([\n      'node',\n      'chromatic-test',\n      '--script-name',\n      'notStorybook',\n      '--storybook-port',\n      '6060',\n    ])\n  ).toMatchObject({\n    scriptName: 'notStorybook',\n    url: 'http://localhost:6060/iframe.html',\n  });\n});\n\nit('throws if you try to specify a script name that is not a storybook, if you do NOT set port', () => {\n  expect(() => parseArgv(['node', 'chromatic-test', '--script-name', 'notStorybook'])).toThrow(\n    /must pass a port/\n  );\n});\n\nit('allows you to specify alternate command if you set port', () => {\n  expect(\n    parseArgv(['node', 'chromatic-test', '--exec', 'storybook-command', '--storybook-port', '6060'])\n  ).toMatchObject({\n    commandName: 'storybook-command',\n    url: 'http://localhost:6060/iframe.html',\n  });\n});\n\nit('throws if you try to specify a command name, if you do NOT set port', () => {\n  expect(() => parseArgv(['node', 'chromatic-test', '--exec', 'storybook-command'])).toThrow(\n    /must pass a port/\n  );\n});\n\nit('throws if you try to pass a script or command name and a url', () => {\n  expect(() =>\n    parseArgv([\n      'node',\n      'chromatic-test',\n      '--exec',\n      'storybook-command',\n      '--storybook-url',\n      'http://foo.bar',\n    ])\n  ).toThrow(/Cannot use --exec with --storybook-url/);\n\n  expect(() =>\n    parseArgv([\n      'node',\n      'chromatic-test',\n      '--script-name',\n      'storybook',\n      '--storybook-url',\n      'http://foo.bar',\n    ])\n  ).toThrow(/Cannot use --scriptName with --storybook-url/);\n});\n\nit('allows you to set a URL without path', () => {\n  expect(\n    parseArgv(['node', 'chromatic-test', '--storybook-url', 'https://google.com'])\n  ).toMatchObject({\n    noStart: true,\n    url: 'https://google.com/iframe.html',\n    createTunnel: false,\n  });\n});\n\nit('allows you to set a URL with a path', () => {\n  expect(\n    parseArgv(['node', 'chromatic-test', '--storybook-url', 'https://google.com/foo'])\n  ).toMatchObject({\n    noStart: true,\n    url: 'https://google.com/foo/iframe.html',\n    createTunnel: false,\n  });\n});\n\nit('allows you to set a URL with iframe.html already set', () => {\n  expect(\n    parseArgv([\n      'node',\n      'chromatic-test',\n      '--storybook-url',\n      'https://google.com/iframe.html?param=foo',\n    ])\n  ).toMatchObject({\n    noStart: true,\n    url: 'https://google.com/iframe.html?param=foo',\n    createTunnel: false,\n  });\n});\n"]}