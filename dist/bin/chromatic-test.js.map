{"version":3,"sources":["../../src/bin/chromatic-test.js"],"names":["process","env","NODE_ENV","resolveHomeDir","filepath","startsWith","path","join","HOME","slice","findOption","storybookScript","shortName","longName","parts","split","index","indexOf","parseArgv","argv","commander","Command","option","parse","commanderOptions","config","appCode","CHROMATIC_APP_CODE","CHROMA_APP_CODE","buildScriptName","scriptName","exec","noStart","doNotStart","https","storybookHttps","cert","storybookCert","key","storybookKey","ca","storybookCa","port","storybookPort","storybookUrl","storybookBuildDir","skip","only","list","fromCI","ci","autoAcceptChanges","exitZeroOnChanges","ignoreLastBuildOnBranch","preserveMissingSpecs","preserveMissing","interactive","verbose","debug","createTunnel","CHROMATIC_CREATE_TUNNEL","originalArgv","packageJson","resolve","singularCommands","filter","name","length","Error","map","n","scripts","console","log","parsedUrl","suffix","pathname","endsWith","url","format","executeTest","sessionId","exitCode","exit","error","e","message","require","main","module"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\n\nimport { Command } from 'commander';\nimport path from 'path';\nimport { readFileSync } from 'jsonfile';\nimport { parse } from 'url';\nimport { v4 as uuid } from 'uuid';\nimport paramCase from 'param-case';\n\nimport runTest from '../tester';\nimport {\n  CHROMATIC_CREATE_TUNNEL,\n  CHROMATIC_APP_CODE,\n  CHROMA_APP_CODE,\n} from '../assets/environment';\n\n// Ensure NODE_ENV is set\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'test';\n\nexport function resolveHomeDir(filepath) {\n  return filepath && filepath.startsWith('~')\n    ? path.join(process.env.HOME, filepath.slice(1))\n    : filepath;\n}\n\n// This is not exactly clever but it works most of the time\nexport function findOption(storybookScript, shortName, longName) {\n  const parts = storybookScript.split(/[\\s='\"]+/);\n  let index = parts.indexOf(longName);\n  if (index === -1) {\n    index = parts.indexOf(shortName);\n  }\n  if (index === -1) {\n    return null;\n  }\n  return parts[index + 1];\n}\n\nexport function parseArgv(argv) {\n  const commander = new Command()\n    .option('-a, --app-code <code>', 'the code for your app, get from chromaticqa.com')\n\n    .option(\n      '-b, --build-script-name [name]',\n      'The npm script that builds your Storybook [build-storybook]'\n    )\n    .option(\n      '-d, --storybook-build-dir <dirname>',\n      \"Provide a directory with your built storybook; use if you've already built your storybook\"\n    )\n\n    .option('-s, --script-name [name]', 'The npm script that starts your Storybook [storybook]')\n    .option('-e, --exec <command>', 'Alternatively, a full command to run to start your storybook.')\n    .option(\n      '-S, --do-not-start',\n      \"Don't attempt to start or build; use if your Storybook is already running\"\n    )\n\n    .option(\n      '--storybook-https',\n      'Use if Storybook is running on https (auto detected from -s, if set)?'\n    )\n    .option(\n      '--storybook-cert <path>',\n      'Use if Storybook is running on https (auto detected from -s, if set)?'\n    )\n    .option(\n      '--storybook-key <path>',\n      'Use if Storybook is running on https (auto detected from -s, if set)?'\n    )\n    .option(\n      '--storybook-ca <ca>',\n      'Use if Storybook is running on https (auto detected from -s, if set)?'\n    )\n    .option(\n      '-p, --storybook-port <port>',\n      'What port is your Storybook running on (auto detected from -s, if set)?'\n    )\n    .option(\n      '-u, --storybook-url <url>',\n      'Storybook is already running at (external) url (implies -S)'\n    )\n\n    .option('--ci', 'This build is running on CI, non-interactively (alternatively, pass CI=true)')\n    .option(\n      '--auto-accept-changes [branch]',\n      'Accept any (non-error) changes or new stories for this build [only for <branch> if specified]'\n    )\n    .option(\n      '--exit-zero-on-changes [branch]',\n      \"Use a 0 exit code if changes are detected (i.e. don't stop the build) [only for <branch> if specified]\"\n    )\n    .option(\n      '--ignore-last-build-on-branch [branch]',\n      'Do not use the last build on this branch as a baseline if it is no longer in history (i.e. branch was rebased) [only for <branch> if specified]'\n    )\n    .option(\n      '--preserve-missing',\n      'Treat missing stories as unchanged (as opposed to deleted) when comparing to the baseline'\n    )\n    .option('--no-interactive', 'Do not prompt for package.json changes')\n\n    .option(\n      '--only <component:story>',\n      'Only run a single story or a glob-style subset of stories (for debugging purposes)'\n    )\n    .option('--skip', 'Skip chromatic tests (mark as passing)')\n    .option('--list', 'List available stories (for debugging purposes)')\n    .option('--debug', 'Output more debugging information')\n\n    // We keep this for back compat it does nothing (ie. it is the default)\n    .option('--storybook-addon', '(deprecated) use the Storybook addon')\n    .parse(argv);\n\n  const commanderOptions = {\n    config: commander.config,\n    appCode: commander.appCode || CHROMATIC_APP_CODE || CHROMA_APP_CODE,\n    buildScriptName: commander.buildScriptName,\n    scriptName: commander.scriptName,\n    exec: commander.exec,\n    noStart: !!commander.doNotStart,\n    https: commander.storybookHttps,\n    cert: commander.storybookCert,\n    key: commander.storybookKey,\n    ca: commander.storybookCa,\n    port: commander.storybookPort,\n    storybookUrl: commander.storybookUrl,\n    storybookBuildDir: commander.storybookBuildDir,\n    skip: commander.skip,\n    only: commander.only,\n    list: commander.list,\n    fromCI: !!commander.ci,\n    autoAcceptChanges: commander.autoAcceptChanges,\n    exitZeroOnChanges: commander.exitZeroOnChanges,\n    ignoreLastBuildOnBranch: commander.ignoreLastBuildOnBranch,\n    preserveMissingSpecs: commander.preserveMissing,\n    interactive: !!commander.interactive,\n    verbose: !!commander.debug,\n    createTunnel: !commander.storybookUrl && CHROMATIC_CREATE_TUNNEL !== 'false',\n    originalArgv: argv,\n  };\n\n  const packageJson = readFileSync(path.resolve('./package.json'));\n  const { storybookBuildDir, exec } = commanderOptions;\n  let { port, storybookUrl, noStart, scriptName, buildScriptName } = commanderOptions;\n  let https = commanderOptions.https && {\n    cert: commanderOptions.cert,\n    key: commanderOptions.key,\n    ca: commanderOptions.ca,\n  };\n\n  // We can only have one of these arguments\n  const singularCommands = [\n    'buildScriptName',\n    'scriptName',\n    'exec',\n    'storybookUrl',\n    'storybookBuildDir',\n  ].filter(name => !!commanderOptions[name]);\n  if (singularCommands.length > 1) {\n    throw new Error(\n      `Can only use one of ${singularCommands.map(n => `--${paramCase(n)}`).join(', ')}.`\n    );\n  }\n\n  // No need to start or build Storybook if we're going to fetch from a URL\n  if (storybookUrl) noStart = true;\n\n  // Build Storybook instead of starting it\n  if (!scriptName && !exec && !noStart && !storybookUrl && !port) {\n    if (storybookBuildDir) {\n      return { ...commanderOptions, noStart: true };\n    }\n    buildScriptName = typeof buildScriptName === 'string' ? buildScriptName : 'build-storybook';\n    if (packageJson.scripts && packageJson.scripts[buildScriptName]) {\n      return { ...commanderOptions, noStart: true, buildScriptName };\n    }\n    throw new Error(\n      `Didn't find a script called '${buildScriptName}' in your \\`package.json\\`.\\n` +\n        'Make sure you set the `--build-script-name` option to the value of the npm script that builds your Storybook.'\n    );\n  }\n\n  // Start Storybook on localhost and generate the URL to it\n  if (!storybookUrl) {\n    if (exec && !port) {\n      throw new Error(`You must pass a port with the --storybook-port option when using --exec.`);\n    }\n\n    if (!exec && (!port || !noStart)) {\n      // If you don't provide a port or we need to start the command, let's look up the script for it\n      scriptName = typeof scriptName === 'string' ? scriptName : 'storybook';\n      const storybookScript = packageJson.scripts && packageJson.scripts[scriptName];\n\n      if (!storybookScript) {\n        throw new Error(\n          `Didn't find a script called '${scriptName}' in your \\`package.json\\`.\\n` +\n            'Make sure you set the `--script-name` option to the value of the npm script that starts your Storybook.'\n        );\n      }\n\n      https =\n        https ||\n        (findOption(storybookScript, '--https') && {\n          cert: resolveHomeDir(findOption(storybookScript, '--ssl-cert')),\n          key: resolveHomeDir(findOption(storybookScript, '--ssl-key')),\n          ca: resolveHomeDir(findOption(storybookScript, '--ssl-ca')),\n        });\n\n      port = port || findOption(storybookScript, '-p', '--port');\n      if (!port) {\n        throw new Error(\n          `Didn't detect a port in your '${scriptName}' script. You must pass a port with the --storybook-port option.`\n        );\n      }\n\n      console.log(\n        `Detected '${scriptName}' script, running with inferred options:\n    --script-name=${scriptName} --storybook-port=${port}\n  Override any of the above if they were inferred incorrectly.\n  `\n      );\n    }\n\n    storybookUrl = `${https ? 'https' : 'http'}://localhost:${port}`;\n  }\n\n  const parsedUrl = parse(storybookUrl);\n  const suffix = 'iframe.html';\n  if (!parsedUrl.pathname.endsWith(suffix)) {\n    if (!parsedUrl.pathname.endsWith('/')) {\n      parsedUrl.pathname += '/';\n    }\n    parsedUrl.pathname += suffix;\n  }\n\n  return {\n    ...commanderOptions,\n    noStart,\n    https,\n    url: parsedUrl.format(),\n    scriptName,\n  };\n}\n\nexport async function executeTest(argv) {\n  const sessionId = uuid();\n  try {\n    const exitCode = await runTest({\n      ...parseArgv(argv),\n      sessionId,\n    });\n    process.exit(exitCode);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `**Chromatic build failed. Please note the session id: '${sessionId}' and contact support@hichroma.com -or- open a support ticket at https://chromaticqa.com**\\n`\n    );\n\n    if (error.length) {\n      // This is a GraphQL Error, our server is reasonable\n      // eslint-disable-next-line no-console\n      error.map(e => console.error(e.message));\n    } else {\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n\n    // eslint-disable-next-line no-console\n    console.log();\n\n    // Not sure what exit code to use but this can mean error.\n    process.exit(255);\n  }\n}\n\n// Normal usage, outside of test\nif (require.main === module) {\n  executeTest(process.argv);\n}\n"],"file":"chromatic-test.js"}