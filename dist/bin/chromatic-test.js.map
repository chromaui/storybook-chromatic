{"version":3,"sources":["../../src/bin/chromatic-test.js"],"names":["argv","parseArgv","exitCode","process","exit","console","error","executeTest","env","NODE_ENV","findOption","storybookScript","shortName","longName","parts","split","index","indexOf","commander","option","parse","commanderOptions","config","appCode","scriptName","commandName","exec","noStart","doNotStart","port","storybookPort","url","storybookUrl","only","fromCI","ci","autoAcceptChanges","exitZeroOnChanges","interactive","verbose","debug","createTunnel","originalArgv","packageJson","resolve","Error","scripts","log","parsedUrl","suffix","pathname","endsWith","toString","require","main","module"],"mappings":"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","file":"chromatic-test.js","sourcesContent":["\n\nimport { Command } from 'commander';\nimport path from 'path';\nimport { readFileSync } from 'jsonfile';\nimport { URL } from 'url';\n\nimport runTest from '../tester';\nimport { CHROMATIC_CREATE_TUNNEL, CHROMATIC_APP_CODE } from '../assets/environment';\n\n// Ensure NODE_ENV is set\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'test';\n\nfunction findOption(storybookScript, shortName, longName) {\n  const parts = storybookScript.split(/[\\s+|=]/);\n  let index = parts.indexOf(longName);\n  if (index === -1) {\n    index = parts.indexOf(shortName);\n  }\n  if (index === -1) {\n    return null;\n  }\n  return parts[index + 1];\n}\n\nexport function parseArgv(argv) {\n  const commander = new Command()\n    .option('-a, --app-code [code]', 'the code for your app, get from chromaticqa.com')\n\n    .option('-s, --script-name [name]', 'The npm script that starts your storybook [storybook]')\n    .option('-e, --exec [command]', 'Alternatively, a full command to run to start your storybook.')\n    .option(\n      '-S, --do-not-start',\n      \"Don't attempt to start; use if your storybook is already running\"\n    )\n\n    .option(\n      '-p, --storybook-port [port]',\n      'What port is your Storybook running on (auto detected from -s, if set)?'\n    )\n    .option('-u, --storybook-url [url]', 'Storybook is already running at url (implies -S)')\n\n    .option('--ci', 'This build is running on CI, non-interactively (alternatively, pass CI=true)')\n    .option('--auto-accept-changes', 'Accept any (non-error) changes or new stories for this build')\n    .option(\n      '--exit-zero-on-changes',\n      \"Use a 0 exit code if changes are detected (i.e. don't stop the build)\"\n    )\n    .option('--no-interactive', 'Do not prompt for package.json changes')\n\n    .option('--only [component:story]', 'Only run a single story (for debugging purposes)')\n    .option('--debug', 'Output more debugging information')\n\n    // We keep this for back compat it does nothing (ie. it is the default)\n    .option('--storybook-addon', '(deprecated) use the storybook addon')\n    .parse(argv);\n\n  const commanderOptions = {\n    config: commander.config,\n    appCode: commander.appCode || CHROMATIC_APP_CODE,\n    scriptName: commander.scriptName,\n    commandName: commander.exec,\n    noStart: !!commander.doNotStart,\n    port: commander.storybookPort,\n    url: commander.storybookUrl,\n    only: commander.only,\n    fromCI: !!commander.ci,\n    autoAcceptChanges: !!commander.autoAcceptChanges,\n    exitZeroOnChanges: !!commander.exitZeroOnChanges,\n    interactive: !!commander.interactive,\n    verbose: !!commander.debug,\n    createTunnel: !commander.storybookUrl && CHROMATIC_CREATE_TUNNEL !== 'false',\n    originalArgv: argv,\n  };\n\n  const packageJson = readFileSync(path.resolve('./package.json'));\n  const { commandName } = commanderOptions;\n  let { port, url, noStart, scriptName } = commanderOptions;\n\n  if (scriptName && commandName) {\n    throw new Error('Cannot use both --scriptName and --commandName');\n  }\n\n  if (url) {\n    if (scriptName || commandName) {\n      throw new Error(\n        `Cannot use ${\n          scriptName ? `--scriptName` : `--exec`\n        } with --storybook-url, it implies --do-not-start`\n      );\n    }\n    noStart = true;\n  } else {\n    if (commandName) {\n      if (!port) {\n        throw new Error(`You must pass a port with the --storybook-port option when using --exec.`);\n      }\n    } else {\n      scriptName = scriptName || 'storybook';\n      const storybookScript = packageJson.scripts && packageJson.scripts[scriptName];\n\n      if (!storybookScript) {\n        throw new Error(\n          `Chromatic Tester: Didn't find a script called '${scriptName}' in your \\`package.json\\`.\\n` +\n            'Make sure you set the `--script-name` option to the value of the npm script that starts your storybook'\n        );\n      }\n\n      port = port || findOption(storybookScript, '-p', '--port');\n      if (!port) {\n        throw new Error(\n          `Didn't detect a port in your '${scriptName}' script. You must pass a port with the --storybook-port option.`\n        );\n      }\n\n      // eslint-disable-next-line no-console\n      console.log(\n        `Chromatic Tester: Detected '${scriptName}' script, running with inferred options:\n    --script-name=${scriptName} --storybook-port=${port}\n  Override any of the above if they were inferred incorrectly.\n  `\n      );\n    }\n\n    url = `http://localhost:${port}`;\n  }\n\n  const parsedUrl = new URL(url);\n  const suffix = 'iframe.html';\n  if (!parsedUrl.pathname.endsWith(suffix)) {\n    if (!parsedUrl.pathname.endsWith('/')) {\n      parsedUrl.pathname += '/';\n    }\n    parsedUrl.pathname += suffix;\n  }\n\n  return { ...commanderOptions, noStart, url: parsedUrl.toString(), scriptName };\n}\n\nexport async function executeTest(argv) {\n  try {\n    const exitCode = await runTest(parseArgv(argv));\n    process.exit(exitCode);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    // Not sure what exit code to use but this can mean error.\n    process.exit(255);\n  }\n}\n\n// Normal usage, outside of test\nif (require.main === module) {\n  executeTest(process.argv);\n}\n"]}