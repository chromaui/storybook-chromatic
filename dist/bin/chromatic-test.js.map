{"version":3,"sources":["../../src/bin/chromatic-test.js"],"names":["argv","parseArgv","exitCode","process","exit","console","error","executeTest","findOption","env","NODE_ENV","storybookScript","shortName","longName","parts","split","index","indexOf","commander","option","parse","commanderOptions","config","appCode","scriptName","commandName","exec","noStart","doNotStart","port","storybookPort","url","storybookUrl","dirname","storybookBuildDir","only","fromCI","ci","autoAcceptChanges","exitZeroOnChanges","interactive","verbose","debug","createTunnel","originalArgv","packageJson","resolve","Error","scripts","log","parsedUrl","suffix","pathname","endsWith","toString","require","main","module"],"mappings":"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","file":"chromatic-test.js","sourcesContent":["\n\nimport { Command } from 'commander';\nimport path from 'path';\nimport { readFileSync } from 'jsonfile';\nimport { URL } from 'url';\n\nimport runTest from '../tester';\nimport { CHROMATIC_CREATE_TUNNEL, CHROMATIC_APP_CODE } from '../assets/environment';\n\n// Ensure NODE_ENV is set\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'test';\n\n// This is not exactly clever but it works most of the time\nexport function findOption(storybookScript, shortName, longName) {\n  const parts = storybookScript.split(/[\\s='\"]+/);\n  let index = parts.indexOf(longName);\n  if (index === -1) {\n    index = parts.indexOf(shortName);\n  }\n  if (index === -1) {\n    return null;\n  }\n  return parts[index + 1];\n}\n\nexport function parseArgv(argv) {\n  const commander = new Command()\n    .option('-a, --app-code [code]', 'the code for your app, get from chromaticqa.com')\n\n    .option('-s, --script-name [name]', 'The npm script that starts your storybook [storybook]')\n    .option('-e, --exec [command]', 'Alternatively, a full command to run to start your storybook.')\n    .option(\n      '-S, --do-not-start',\n      \"Don't attempt to start; use if your storybook is already running\"\n    )\n\n    .option(\n      '-p, --storybook-port [port]',\n      'What port is your Storybook running on (auto detected from -s, if set)?'\n    )\n    .option(\n      '-u, --storybook-url [url]',\n      'Storybook is already running at (external) url (implies -S)'\n    )\n    .option(\n      '-d, --storybook-build-dir [dirname]',\n      'Provide a directory with your built storybook, implies -S'\n    )\n\n    .option('--ci', 'This build is running on CI, non-interactively (alternatively, pass CI=true)')\n    .option('--auto-accept-changes', 'Accept any (non-error) changes or new stories for this build')\n    .option(\n      '--exit-zero-on-changes',\n      \"Use a 0 exit code if changes are detected (i.e. don't stop the build)\"\n    )\n    .option('--no-interactive', 'Do not prompt for package.json changes')\n\n    .option('--only [component:story]', 'Only run a single story (for debugging purposes)')\n    .option('--debug', 'Output more debugging information')\n\n    // We keep this for back compat it does nothing (ie. it is the default)\n    .option('--storybook-addon', '(deprecated) use the storybook addon')\n    .parse(argv);\n\n  const commanderOptions = {\n    config: commander.config,\n    appCode: commander.appCode || CHROMATIC_APP_CODE,\n    scriptName: commander.scriptName,\n    commandName: commander.exec,\n    noStart: !!commander.doNotStart,\n    port: commander.storybookPort,\n    url: commander.storybookUrl,\n    dirname: commander.storybookBuildDir,\n    only: commander.only,\n    fromCI: !!commander.ci,\n    autoAcceptChanges: !!commander.autoAcceptChanges,\n    exitZeroOnChanges: !!commander.exitZeroOnChanges,\n    interactive: !!commander.interactive,\n    verbose: !!commander.debug,\n    createTunnel: !commander.storybookUrl && CHROMATIC_CREATE_TUNNEL !== 'false',\n    originalArgv: argv,\n  };\n\n  const packageJson = readFileSync(path.resolve('./package.json'));\n  const { commandName } = commanderOptions;\n  // eslint-disable-next-line prefer-const\n  let { port, url, dirname, noStart, scriptName } = commanderOptions;\n\n  if (scriptName && commandName) {\n    throw new Error('Cannot use both --scriptName and --commandName');\n  }\n\n  if (url || dirname) {\n    if (scriptName || commandName) {\n      throw new Error(\n        `Cannot use ${scriptName ? `--scriptName` : `--exec`} with ${\n          url ? '--storybook-url' : '--storybook-directory'\n        }, it implies --do-not-start`\n      );\n    }\n\n    if (url && dirname) {\n      throw new Error(`Cannot use both --storybook-url and --storybook-directory`);\n    }\n\n    noStart = true;\n  } else {\n    if (commandName) {\n      if (!port) {\n        throw new Error(`You must pass a port with the --storybook-port option when using --exec.`);\n      }\n    } else {\n      scriptName = scriptName || 'storybook';\n      const storybookScript = packageJson.scripts && packageJson.scripts[scriptName];\n\n      if (!storybookScript) {\n        throw new Error(\n          `Chromatic Tester: Didn't find a script called '${scriptName}' in your \\`package.json\\`.\\n` +\n            'Make sure you set the `--script-name` option to the value of the npm script that starts your storybook'\n        );\n      }\n\n      port = port || findOption(storybookScript, '-p', '--port');\n      if (!port) {\n        throw new Error(\n          `Didn't detect a port in your '${scriptName}' script. You must pass a port with the --storybook-port option.`\n        );\n      }\n\n      // eslint-disable-next-line no-console\n      console.log(\n        `Chromatic Tester: Detected '${scriptName}' script, running with inferred options:\n    --script-name=${scriptName} --storybook-port=${port}\n  Override any of the above if they were inferred incorrectly.\n  `\n      );\n    }\n\n    url = `http://localhost:${port}`;\n  }\n\n  if (dirname) {\n    return { ...commanderOptions, noStart: true, dirname };\n  }\n\n  const parsedUrl = new URL(url);\n  const suffix = 'iframe.html';\n  if (!parsedUrl.pathname.endsWith(suffix)) {\n    if (!parsedUrl.pathname.endsWith('/')) {\n      parsedUrl.pathname += '/';\n    }\n    parsedUrl.pathname += suffix;\n  }\n\n  return { ...commanderOptions, noStart, url: parsedUrl.toString(), scriptName };\n}\n\nexport async function executeTest(argv) {\n  try {\n    const exitCode = await runTest(parseArgv(argv));\n    process.exit(exitCode);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    // Not sure what exit code to use but this can mean error.\n    process.exit(255);\n  }\n}\n\n// Normal usage, outside of test\nif (require.main === module) {\n  executeTest(process.argv);\n}\n"]}