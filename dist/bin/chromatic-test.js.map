{"version":3,"sources":["../../src/bin/chromatic-test.js"],"names":["argv","sessionId","parseArgv","exitCode","process","exit","console","error","length","map","e","message","log","executeTest","findOption","env","NODE_ENV","storybookScript","shortName","longName","parts","split","index","indexOf","commander","option","parse","commanderOptions","config","appCode","scriptName","commandName","exec","noStart","doNotStart","port","storybookPort","url","storybookUrl","dirname","storybookBuildDir","only","fromCI","ci","autoAcceptChanges","exitZeroOnChanges","ignoreLastBuildOnBranch","interactive","verbose","debug","createTunnel","originalArgv","packageJson","resolve","Error","scripts","parsedUrl","suffix","pathname","endsWith","format","require","main","module"],"mappings":"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","file":"chromatic-test.js","sourcesContent":["\n\nimport { Command } from 'commander';\nimport path from 'path';\nimport { readFileSync } from 'jsonfile';\nimport { parse } from 'url';\nimport { v4 as uuid } from 'uuid';\n\nimport runTest from '../tester';\nimport { CHROMATIC_CREATE_TUNNEL, CHROMATIC_APP_CODE } from '../assets/environment';\n\n// Ensure NODE_ENV is set\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'test';\n\n// This is not exactly clever but it works most of the time\nexport function findOption(storybookScript, shortName, longName) {\n  const parts = storybookScript.split(/[\\s='\"]+/);\n  let index = parts.indexOf(longName);\n  if (index === -1) {\n    index = parts.indexOf(shortName);\n  }\n  if (index === -1) {\n    return null;\n  }\n  return parts[index + 1];\n}\n\nexport function parseArgv(argv) {\n  const commander = new Command()\n    .option('-a, --app-code <code>', 'the code for your app, get from chromaticqa.com')\n\n    .option('-s, --script-name <name>', 'The npm script that starts your storybook [storybook]')\n    .option('-e, --exec <command>', 'Alternatively, a full command to run to start your storybook.')\n    .option(\n      '-S, --do-not-start',\n      \"Don't attempt to start; use if your storybook is already running\"\n    )\n\n    .option(\n      '-p, --storybook-port <port>',\n      'What port is your Storybook running on (auto detected from -s, if set)?'\n    )\n    .option(\n      '-u, --storybook-url <url>',\n      'Storybook is already running at (external) url (implies -S)'\n    )\n    .option(\n      '-d, --storybook-build-dir <dirname>',\n      'Provide a directory with your built storybook (implies -S)'\n    )\n\n    .option('--ci', 'This build is running on CI, non-interactively (alternatively, pass CI=true)')\n    .option(\n      '--auto-accept-changes [branch]',\n      'Accept any (non-error) changes or new stories for this build [only for <branch> if specified]'\n    )\n    .option(\n      '--exit-zero-on-changes [branch]',\n      \"Use a 0 exit code if changes are detected (i.e. don't stop the build) [only for <branch> if specified]\"\n    )\n    .option(\n      '--ignore-last-build-on-branch [branch]',\n      'Do not use the last build on this branch as a baseline if it is no longer in history (i.e. branch was rebased) [only for <branch> if specified]'\n    )\n    .option('--no-interactive', 'Do not prompt for package.json changes')\n\n    .option('--only <component:story>', 'Only run a single story (for debugging purposes)')\n    .option('--debug', 'Output more debugging information')\n\n    // We keep this for back compat it does nothing (ie. it is the default)\n    .option('--storybook-addon', '(deprecated) use the storybook addon')\n    .parse(argv);\n\n  const commanderOptions = {\n    config: commander.config,\n    appCode: commander.appCode || CHROMATIC_APP_CODE,\n    scriptName: commander.scriptName,\n    commandName: commander.exec,\n    noStart: !!commander.doNotStart,\n    port: commander.storybookPort,\n    url: commander.storybookUrl,\n    dirname: commander.storybookBuildDir,\n    only: commander.only,\n    fromCI: !!commander.ci,\n    autoAcceptChanges: commander.autoAcceptChanges,\n    exitZeroOnChanges: commander.exitZeroOnChanges,\n    ignoreLastBuildOnBranch: commander.ignoreLastBuildOnBranch,\n    interactive: !!commander.interactive,\n    verbose: !!commander.debug,\n    createTunnel: !commander.storybookUrl && CHROMATIC_CREATE_TUNNEL !== 'false',\n    originalArgv: argv,\n  };\n\n  const packageJson = readFileSync(path.resolve('./package.json'));\n  const { commandName } = commanderOptions;\n  // eslint-disable-next-line prefer-const\n  let { port, url, dirname, noStart, scriptName } = commanderOptions;\n\n  if (scriptName && commandName) {\n    throw new Error('Cannot use both --scriptName and --commandName');\n  }\n\n  if (url || dirname) {\n    if (scriptName || commandName) {\n      throw new Error(\n        `Cannot use ${scriptName ? `--scriptName` : `--exec`} with ${\n          url ? '--storybook-url' : '--storybook-directory'\n        }, it implies --do-not-start`\n      );\n    }\n\n    if (url && dirname) {\n      throw new Error(`Cannot use both --storybook-url and --storybook-directory`);\n    }\n\n    noStart = true;\n  } else {\n    if (commandName) {\n      if (!port) {\n        throw new Error(`You must pass a port with the --storybook-port option when using --exec.`);\n      }\n    } else {\n      scriptName = scriptName || 'storybook';\n      const storybookScript = packageJson.scripts && packageJson.scripts[scriptName];\n\n      if (!storybookScript) {\n        throw new Error(\n          `Chromatic Tester: Didn't find a script called '${scriptName}' in your \\`package.json\\`.\\n` +\n            'Make sure you set the `--script-name` option to the value of the npm script that starts your storybook'\n        );\n      }\n\n      port = port || findOption(storybookScript, '-p', '--port');\n      if (!port) {\n        throw new Error(\n          `Didn't detect a port in your '${scriptName}' script. You must pass a port with the --storybook-port option.`\n        );\n      }\n\n      // eslint-disable-next-line no-console\n      console.log(\n        `Chromatic Tester: Detected '${scriptName}' script, running with inferred options:\n    --script-name=${scriptName} --storybook-port=${port}\n  Override any of the above if they were inferred incorrectly.\n  `\n      );\n    }\n\n    url = `http://localhost:${port}`;\n  }\n\n  if (dirname) {\n    return { ...commanderOptions, noStart: true, dirname };\n  }\n\n  const parsedUrl = parse(url);\n  const suffix = 'iframe.html';\n  if (!parsedUrl.pathname.endsWith(suffix)) {\n    if (!parsedUrl.pathname.endsWith('/')) {\n      parsedUrl.pathname += '/';\n    }\n    parsedUrl.pathname += suffix;\n  }\n\n  return { ...commanderOptions, noStart, url: parsedUrl.format(), scriptName };\n}\n\nexport async function executeTest(argv) {\n  const sessionId = uuid();\n  try {\n    const exitCode = await runTest({\n      ...parseArgv(argv),\n      sessionId,\n    });\n    process.exit(exitCode);\n  } catch (error) {\n    console.error(\n      `**Chromatic build failed. Please note the session id: '${sessionId}' and contact support@hichroma.com -or- open a support ticket at https://chromaticqa.com**\\n`\n    );\n    if (error.length) {\n      // eslint-disable-next-line no-console\n      // This is a GraphQL Error, our server is reasonable\n      error.map(e => console.error(e.message));\n    } else {\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n    console.log();\n    // Not sure what exit code to use but this can mean error.\n    process.exit(255);\n  }\n}\n\n// Normal usage, outside of test\nif (require.main === module) {\n  executeTest(process.argv);\n}\n"]}